#!/usr/bin/env bash
set -euo pipefail

# check-kafka-connection.sh
# -------------------------
# Lightweight Kafka connectivity probe. Creates a temporary topic, produces a
# single message, consumes it back, and optionally tears the topic down. All
# wiring happens through docker-compose so the script stays self-contained.
#
# Usage:
#   scripts/check-kafka-connection.sh [--topic probe-topic] [--keep-topic] [--env-file path]
#
# Flags:
#   --topic NAME     Use NAME for the probe topic (default: autogenerated).
#   --keep-topic     Skip deleting the probe topic after the test.
#   --env-file PATH  Source PATH before reading environment (default: ./.env when present).
#   --help           Display this help text.
#
# Environment overrides (read after sourcing the env file, if any):
#   KAFKA_BOOTSTRAP       Kafka bootstrap servers (default kafka-1:9092)
#   KAFKA_BROKER_SERVICE  docker-compose service name for the broker (default kafka-1)
#   KAFKA_PROBE_TOPIC     Alternate way to set the probe topic name
#   KAFKA_KEEP_PROBE      When set to 1, keep the topic after the test

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$ROOT_DIR"

ENV_FILE_DEFAULT=".env"
PROBE_TOPIC=""
KEEP_TOPIC=0

function usage() {
  sed -n '3,21p' "$0"
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --topic)
      PROBE_TOPIC="$2"
      shift 2
      ;;
    --keep-topic)
      KEEP_TOPIC=1
      shift
      ;;
    --env-file)
      ENV_FILE_DEFAULT="$2"
      shift 2
      ;;
    --help|-h)
      usage
      exit 0
      ;;
    *)
      echo "unknown argument: $1" >&2
      usage
      exit 1
      ;;
  esac
done

if [[ -f "$ENV_FILE_DEFAULT" ]]; then
  echo "==> Loading environment from $ENV_FILE_DEFAULT"
  set -a
  # shellcheck disable=SC1090
  source "$ENV_FILE_DEFAULT"
  set +a
fi

BOOTSTRAP="${KAFKA_BOOTSTRAP:-kafka-1:9092}"
BROKER_SERVICE="${KAFKA_BROKER_SERVICE:-kafka-1}"
if [[ -z "$PROBE_TOPIC" ]]; then
  PROBE_TOPIC="${KAFKA_PROBE_TOPIC:-_kafka_probe_$(date -u +%s)_$RANDOM}"
fi

if [[ "${KAFKA_KEEP_PROBE:-0}" == "1" ]]; then
  KEEP_TOPIC=1
fi

for cmd in docker; do
  if ! command -v "$cmd" >/dev/null 2>&1; then
    echo "required command '$cmd' not found on PATH" >&2
    exit 1
  fi
done

KAFKA_BIN="/opt/bitnami/kafka/bin"
PROBE_VALUE="connection-probe-$(date -u +%s)"
TMP_CONSUME="$(mktemp -t kafka-probe-XXXXXX)"

function cleanup() {
  rm -f "$TMP_CONSUME"
}
trap cleanup EXIT

function broker_cmd() {
  local command="$1"
  docker compose exec -T "$BROKER_SERVICE" sh -c "$command"
}

echo "==> Checking broker API versions on $BOOTSTRAP"
broker_cmd "$KAFKA_BIN/kafka-broker-api-versions.sh --bootstrap-server \"$BOOTSTRAP\"" >/dev/null

echo "==> Creating probe topic $PROBE_TOPIC"
broker_cmd "$KAFKA_BIN/kafka-topics.sh --bootstrap-server \"$BOOTSTRAP\" --create --if-not-exists --topic \"$PROBE_TOPIC\" --partitions 1 --replication-factor 3" >/dev/null

echo "==> Producing probe message"
printf '%s\n' "$PROBE_VALUE" | broker_cmd "$KAFKA_BIN/kafka-console-producer.sh --bootstrap-server \"$BOOTSTRAP\" --topic \"$PROBE_TOPIC\"" >/dev/null

echo "==> Consuming probe message"
broker_cmd "$KAFKA_BIN/kafka-console-consumer.sh --bootstrap-server \"$BOOTSTRAP\" --topic \"$PROBE_TOPIC\" --from-beginning --max-messages 1 --timeout-ms 5000" >"$TMP_CONSUME" || true

if grep -q "$PROBE_VALUE" "$TMP_CONSUME"; then
  echo "✔ Successfully produced and consumed probe message on $PROBE_TOPIC"
else
  echo "✖ Failed to observe probe message on $PROBE_TOPIC" >&2
  cat "$TMP_CONSUME" >&2 || true
  if [[ "$KEEP_TOPIC" -eq 0 ]]; then
    broker_cmd "$KAFKA_BIN/kafka-topics.sh --bootstrap-server \"$BOOTSTRAP\" --delete --topic \"$PROBE_TOPIC\"" >/dev/null || true
  fi
  exit 1
fi

if [[ "$KEEP_TOPIC" -eq 0 ]]; then
  echo "==> Deleting probe topic $PROBE_TOPIC"
  broker_cmd "$KAFKA_BIN/kafka-topics.sh --bootstrap-server \"$BOOTSTRAP\" --delete --topic \"$PROBE_TOPIC\"" >/dev/null || true
fi

echo "Kafka connection check complete."
